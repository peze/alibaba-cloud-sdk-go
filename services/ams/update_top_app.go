
package ams

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// UpdateTopApp invokes the ams.UpdateTopApp API synchronously
// api document: https://help.aliyun.com/api/ams/updatetopapp.html
func (client *Client) UpdateTopApp(request *UpdateTopAppRequest) (response *UpdateTopAppResponse, err error) {
response = CreateUpdateTopAppResponse()
err = client.DoAction(request, response)
return
}

// UpdateTopAppWithChan invokes the ams.UpdateTopApp API asynchronously
// api document: https://help.aliyun.com/api/ams/updatetopapp.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) UpdateTopAppWithChan(request *UpdateTopAppRequest) (<-chan *UpdateTopAppResponse, <-chan error) {
responseChan := make(chan *UpdateTopAppResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.UpdateTopApp(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// UpdateTopAppWithCallback invokes the ams.UpdateTopApp API asynchronously
// api document: https://help.aliyun.com/api/ams/updatetopapp.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) UpdateTopAppWithCallback(request *UpdateTopAppRequest, callback func(response *UpdateTopAppResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *UpdateTopAppResponse
var err error
defer close(result)
response, err = client.UpdateTopApp(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// UpdateTopAppRequest is the request struct for api UpdateTopApp
type UpdateTopAppRequest struct {
*requests.RpcRequest
                    Name     string `position:"Query" name:"Name"`
                    AppKey     string `position:"Query" name:"AppKey"`
                    CallbackUrl     string `position:"Query" name:"CallbackUrl"`
                    OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
                    LogoUrl     string `position:"Query" name:"LogoUrl"`
}


// UpdateTopAppResponse is the response struct for api UpdateTopApp
type UpdateTopAppResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            Code     string `json:"Code" xml:"Code"`
}

// CreateUpdateTopAppRequest creates a request to invoke UpdateTopApp API
func CreateUpdateTopAppRequest() (request *UpdateTopAppRequest) {
request = &UpdateTopAppRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("AMS", "2018-02-12", "UpdateTopApp", "", "")
return
}

// CreateUpdateTopAppResponse creates a response to parse from UpdateTopApp response
func CreateUpdateTopAppResponse() (response *UpdateTopAppResponse) {
response = &UpdateTopAppResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


