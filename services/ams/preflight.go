
package ams

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// Preflight invokes the ams.Preflight API synchronously
// api document: https://help.aliyun.com/api/ams/preflight.html
func (client *Client) Preflight(request *PreflightRequest) (response *PreflightResponse, err error) {
response = CreatePreflightResponse()
err = client.DoAction(request, response)
return
}

// PreflightWithChan invokes the ams.Preflight API asynchronously
// api document: https://help.aliyun.com/api/ams/preflight.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PreflightWithChan(request *PreflightRequest) (<-chan *PreflightResponse, <-chan error) {
responseChan := make(chan *PreflightResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.Preflight(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// PreflightWithCallback invokes the ams.Preflight API asynchronously
// api document: https://help.aliyun.com/api/ams/preflight.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PreflightWithCallback(request *PreflightRequest, callback func(response *PreflightResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *PreflightResponse
var err error
defer close(result)
response, err = client.Preflight(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// PreflightRequest is the request struct for api Preflight
type PreflightRequest struct {
*requests.RpcRequest
                    BundleId     string `position:"Query" name:"BundleId"`
                    EncodedCert     string `position:"Query" name:"EncodedCert"`
                    OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
                    DeviceToken     string `position:"Query" name:"DeviceToken"`
                    Message     string `position:"Query" name:"Message"`
                    CertMode     string `position:"Query" name:"CertMode"`
                    Password     string `position:"Query" name:"Password"`
                    AppKey     requests.Integer `position:"Query" name:"AppKey"`
}


// PreflightResponse is the response struct for api Preflight
type PreflightResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            Code     string `json:"Code" xml:"Code"`
}

// CreatePreflightRequest creates a request to invoke Preflight API
func CreatePreflightRequest() (request *PreflightRequest) {
request = &PreflightRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("AMS", "2018-02-12", "Preflight", "", "")
return
}

// CreatePreflightResponse creates a response to parse from Preflight response
func CreatePreflightResponse() (response *PreflightResponse) {
response = &PreflightResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


