
package ams

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// UploadAppCert invokes the ams.UploadAppCert API synchronously
// api document: https://help.aliyun.com/api/ams/uploadappcert.html
func (client *Client) UploadAppCert(request *UploadAppCertRequest) (response *UploadAppCertResponse, err error) {
response = CreateUploadAppCertResponse()
err = client.DoAction(request, response)
return
}

// UploadAppCertWithChan invokes the ams.UploadAppCert API asynchronously
// api document: https://help.aliyun.com/api/ams/uploadappcert.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) UploadAppCertWithChan(request *UploadAppCertRequest) (<-chan *UploadAppCertResponse, <-chan error) {
responseChan := make(chan *UploadAppCertResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.UploadAppCert(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// UploadAppCertWithCallback invokes the ams.UploadAppCert API asynchronously
// api document: https://help.aliyun.com/api/ams/uploadappcert.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) UploadAppCertWithCallback(request *UploadAppCertRequest, callback func(response *UploadAppCertResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *UploadAppCertResponse
var err error
defer close(result)
response, err = client.UploadAppCert(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// UploadAppCertRequest is the request struct for api UploadAppCert
type UploadAppCertRequest struct {
*requests.RpcRequest
                    Password     string `position:"Query" name:"Password"`
                    EncodedCert     string `position:"Query" name:"EncodedCert"`
                    AppKey     requests.Integer `position:"Query" name:"AppKey"`
                    OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
                    CertMode     string `position:"Query" name:"CertMode"`
}


// UploadAppCertResponse is the response struct for api UploadAppCert
type UploadAppCertResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            Code     string `json:"Code" xml:"Code"`
}

// CreateUploadAppCertRequest creates a request to invoke UploadAppCert API
func CreateUploadAppCertRequest() (request *UploadAppCertRequest) {
request = &UploadAppCertRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("AMS", "2018-02-12", "UploadAppCert", "", "")
return
}

// CreateUploadAppCertResponse creates a response to parse from UploadAppCert response
func CreateUploadAppCertResponse() (response *UploadAppCertResponse) {
response = &UploadAppCertResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


