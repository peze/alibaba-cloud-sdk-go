
package acs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetApiDoc invokes the acs.GetApiDoc API synchronously
// api document: https://help.aliyun.com/api/acs/getapidoc.html
func (client *Client) GetApiDoc(request *GetApiDocRequest) (response *GetApiDocResponse, err error) {
response = CreateGetApiDocResponse()
err = client.DoAction(request, response)
return
}

// GetApiDocWithChan invokes the acs.GetApiDoc API asynchronously
// api document: https://help.aliyun.com/api/acs/getapidoc.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetApiDocWithChan(request *GetApiDocRequest) (<-chan *GetApiDocResponse, <-chan error) {
responseChan := make(chan *GetApiDocResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.GetApiDoc(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// GetApiDocWithCallback invokes the acs.GetApiDoc API asynchronously
// api document: https://help.aliyun.com/api/acs/getapidoc.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetApiDocWithCallback(request *GetApiDocRequest, callback func(response *GetApiDocResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *GetApiDocResponse
var err error
defer close(result)
response, err = client.GetApiDoc(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// GetApiDocRequest is the request struct for api GetApiDoc
type GetApiDocRequest struct {
*requests.RoaRequest
                    Environment     string `position:"Path" name:"Environment"`
                    ApiName     string `position:"Path" name:"ApiName"`
                    ProductName     string `position:"Path" name:"ProductName"`
                    Language     string `position:"Path" name:"Language"`
                    VersionName     string `position:"Path" name:"VersionName"`
                    ForceLoadFromApi     string `position:"Query" name:"ForceLoadFromApi"`
                    Accept     string `position:"Header" name:"Accept"`
}


// GetApiDocResponse is the response struct for api GetApiDoc
type GetApiDocResponse struct {
*responses.BaseResponse
            Product     string `json:"product" xml:"product"`
            Version     string `json:"version" xml:"version"`
            Name     string `json:"name" xml:"name"`
            Title     string `json:"title" xml:"title"`
            TagId     string `json:"tagId" xml:"tagId"`
            Index     string `json:"index" xml:"index"`
            Language     string `json:"language" xml:"language"`
            AbcDocumentId     string `json:"abcDocumentId" xml:"abcDocumentId"`
            ResultMapping     string `json:"ResultMapping" xml:"ResultMapping"`
            Parameters     string `json:"Parameters" xml:"Parameters"`
            RequestDemo     string `json:"RequestDemo" xml:"RequestDemo"`
            ResponseDemo     string `json:"ResponseDemo" xml:"ResponseDemo"`
            ErrorResponseDemo     string `json:"ErrorResponseDemo" xml:"ErrorResponseDemo"`
            XmlResponseDemo     string `json:"XmlResponseDemo" xml:"XmlResponseDemo"`
            XmlErrorResponseDemo     string `json:"XmlErrorResponseDemo" xml:"XmlErrorResponseDemo"`
            Description     string `json:"Description" xml:"Description"`
            ErrorMapping ErrorMapping  `json:"ErrorMapping" xml:"ErrorMapping"`
}

// CreateGetApiDocRequest creates a request to invoke GetApiDoc API
func CreateGetApiDocRequest() (request *GetApiDocRequest) {
request = &GetApiDocRequest{
RoaRequest: &requests.RoaRequest{},
}
request.InitWithApiInfo("Acs", "2015-01-01", "GetApiDoc", "/ApiDoc/[ProductName]/[VersionName]/[ApiName]/[Language]/[Environment]", "", "")
request.Method = requests.GET
return
}

// CreateGetApiDocResponse creates a response to parse from GetApiDoc response
func CreateGetApiDocResponse() (response *GetApiDocResponse) {
response = &GetApiDocResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


