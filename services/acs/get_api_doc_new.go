
package acs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetApiDocNew invokes the acs.GetApiDocNew API synchronously
// api document: https://help.aliyun.com/api/acs/getapidocnew.html
func (client *Client) GetApiDocNew(request *GetApiDocNewRequest) (response *GetApiDocNewResponse, err error) {
response = CreateGetApiDocNewResponse()
err = client.DoAction(request, response)
return
}

// GetApiDocNewWithChan invokes the acs.GetApiDocNew API asynchronously
// api document: https://help.aliyun.com/api/acs/getapidocnew.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetApiDocNewWithChan(request *GetApiDocNewRequest) (<-chan *GetApiDocNewResponse, <-chan error) {
responseChan := make(chan *GetApiDocNewResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.GetApiDocNew(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// GetApiDocNewWithCallback invokes the acs.GetApiDocNew API asynchronously
// api document: https://help.aliyun.com/api/acs/getapidocnew.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetApiDocNewWithCallback(request *GetApiDocNewRequest, callback func(response *GetApiDocNewResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *GetApiDocNewResponse
var err error
defer close(result)
response, err = client.GetApiDocNew(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// GetApiDocNewRequest is the request struct for api GetApiDocNew
type GetApiDocNewRequest struct {
*requests.RoaRequest
                    ApiName     string `position:"Path" name:"ApiName"`
                    IsDraft     requests.Boolean `position:"Path" name:"IsDraft"`
                    ProductName     string `position:"Path" name:"ProductName"`
                    Language     string `position:"Path" name:"Language"`
                    VersionName     string `position:"Path" name:"VersionName"`
                    Accept     string `position:"Header" name:"Accept"`
}


// GetApiDocNewResponse is the response struct for api GetApiDocNew
type GetApiDocNewResponse struct {
*responses.BaseResponse
            Language     string `json:"language" xml:"language"`
            Description     string `json:"Description" xml:"Description"`
            Product     string `json:"product" xml:"product"`
            Version     string `json:"version" xml:"version"`
            Name     string `json:"name" xml:"name"`
            Title     string `json:"title" xml:"title"`
            TagId     string `json:"tagId" xml:"tagId"`
            Index     string `json:"index" xml:"index"`
            Visibility     string `json:"visibility" xml:"visibility"`
            AbcDocumentId     string `json:"abcDocumentId" xml:"abcDocumentId"`
            TagName     string `json:"tagName" xml:"tagName"`
            TagIndex     int `json:"tagIndex" xml:"tagIndex"`
            ApiSnapshotId     string `json:"apiSnapshotId" xml:"apiSnapshotId"`
            ResultMapping     string `json:"ResultMapping" xml:"ResultMapping"`
            RequestDemo     string `json:"RequestDemo" xml:"RequestDemo"`
                    ParameterList ParameterListInGetApiDocNew `json:"ParameterList" xml:"ParameterList"`
                    ErrorCodeList ErrorCodeListInGetApiDocNew `json:"ErrorCodeList" xml:"ErrorCodeList"`
                    ResponseDemoList ResponseDemoListInGetApiDocNew `json:"ResponseDemoList" xml:"ResponseDemoList"`
}

// CreateGetApiDocNewRequest creates a request to invoke GetApiDocNew API
func CreateGetApiDocNewRequest() (request *GetApiDocNewRequest) {
request = &GetApiDocNewRequest{
RoaRequest: &requests.RoaRequest{},
}
request.InitWithApiInfo("Acs", "2015-01-01", "GetApiDocNew", "/ApiDocNew/[ProductName]/[VersionName]/[ApiName]/[Language]/[IsDraft]", "", "")
request.Method = requests.GET
return
}

// CreateGetApiDocNewResponse creates a response to parse from GetApiDocNew response
func CreateGetApiDocNewResponse() (response *GetApiDocNewResponse) {
response = &GetApiDocNewResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


