package acs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// PurchaseApi invokes the acs.PurchaseApi API synchronously
// api document: https://help.aliyun.com/api/acs/purchaseapi.html
func (client *Client) PurchaseApi(request *PurchaseApiRequest) (response *PurchaseApiResponse, err error) {
	response = CreatePurchaseApiResponse()
	err = client.DoAction(request, response)
	return
}

// PurchaseApiWithChan invokes the acs.PurchaseApi API asynchronously
// api document: https://help.aliyun.com/api/acs/purchaseapi.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PurchaseApiWithChan(request *PurchaseApiRequest) (<-chan *PurchaseApiResponse, <-chan error) {
	responseChan := make(chan *PurchaseApiResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PurchaseApi(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// PurchaseApiWithCallback invokes the acs.PurchaseApi API asynchronously
// api document: https://help.aliyun.com/api/acs/purchaseapi.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PurchaseApiWithCallback(request *PurchaseApiRequest, callback func(response *PurchaseApiResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PurchaseApiResponse
		var err error
		defer close(result)
		response, err = client.PurchaseApi(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// PurchaseApiRequest is the request struct for api PurchaseApi
type PurchaseApiRequest struct {
	*requests.RoaRequest
	OrgCode         string           `position:"Query" name:"OrgCode"`
	PurchaseProduct string           `position:"Query" name:"PurchaseProduct"`
	Channel         string           `position:"Query" name:"Channel"`
	PurchaseApiName string           `position:"Query" name:"PurchaseApiName"`
	ServiceDate     string           `position:"Query" name:"ServiceDate"`
	Quota           requests.Integer `position:"Query" name:"Quota"`
	PurchaseVersion string           `position:"Query" name:"PurchaseVersion"`
	BillingType     string           `position:"Query" name:"BillingType"`
}

// PurchaseApiResponse is the response struct for api PurchaseApi
type PurchaseApiResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	InstanceId string `json:"InstanceId" xml:"InstanceId"`
}

// CreatePurchaseApiRequest creates a request to invoke PurchaseApi API
func CreatePurchaseApiRequest() (request *PurchaseApiRequest) {
	request = &PurchaseApiRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("Acs", "2015-01-01", "PurchaseApi", "/Api/PurchaseApi", "12334", "openAPI")
	request.Method = requests.POST
	return
}

// CreatePurchaseApiResponse creates a response to parse from PurchaseApi response
func CreatePurchaseApiResponse() (response *PurchaseApiResponse) {
	response = &PurchaseApiResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
