
package acs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// PutApiStatus invokes the acs.PutApiStatus API synchronously
// api document: https://help.aliyun.com/api/acs/putapistatus.html
func (client *Client) PutApiStatus(request *PutApiStatusRequest) (response *PutApiStatusResponse, err error) {
response = CreatePutApiStatusResponse()
err = client.DoAction(request, response)
return
}

// PutApiStatusWithChan invokes the acs.PutApiStatus API asynchronously
// api document: https://help.aliyun.com/api/acs/putapistatus.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PutApiStatusWithChan(request *PutApiStatusRequest) (<-chan *PutApiStatusResponse, <-chan error) {
responseChan := make(chan *PutApiStatusResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.PutApiStatus(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// PutApiStatusWithCallback invokes the acs.PutApiStatus API asynchronously
// api document: https://help.aliyun.com/api/acs/putapistatus.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PutApiStatusWithCallback(request *PutApiStatusRequest, callback func(response *PutApiStatusResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *PutApiStatusResponse
var err error
defer close(result)
response, err = client.PutApiStatus(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// PutApiStatusRequest is the request struct for api PutApiStatus
type PutApiStatusRequest struct {
*requests.RoaRequest
                    ContentLength     requests.Integer `position:"Header" name:"Content-Length"`
                    ApiName     string `position:"Path" name:"ApiName"`
                    ContentMD5     string `position:"Header" name:"Content-MD5"`
                    ProductName     string `position:"Path" name:"ProductName"`
                    ContentType     string `position:"Header" name:"Content-Type"`
                    VersionName     string `position:"Path" name:"VersionName"`
                    Accept     string `position:"Header" name:"Accept"`
                    Status     string `position:"Query" name:"Status"`
}


// PutApiStatusResponse is the response struct for api PutApiStatus
type PutApiStatusResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
}

// CreatePutApiStatusRequest creates a request to invoke PutApiStatus API
func CreatePutApiStatusRequest() (request *PutApiStatusRequest) {
request = &PutApiStatusRequest{
RoaRequest: &requests.RoaRequest{},
}
request.InitWithApiInfo("Acs", "2015-01-01", "PutApiStatus", "/Status/[ProductName]/[VersionName]/[ApiName]", "", "")
request.Method = requests.PUT
return
}

// CreatePutApiStatusResponse creates a response to parse from PutApiStatus response
func CreatePutApiStatusResponse() (response *PutApiStatusResponse) {
response = &PutApiStatusResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


