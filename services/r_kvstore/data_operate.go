
package r_kvstore

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DataOperate invokes the r_kvstore.DataOperate API synchronously
// api document: https://help.aliyun.com/api/r-kvstore/dataoperate.html
func (client *Client) DataOperate(request *DataOperateRequest) (response *DataOperateResponse, err error) {
response = CreateDataOperateResponse()
err = client.DoAction(request, response)
return
}

// DataOperateWithChan invokes the r_kvstore.DataOperate API asynchronously
// api document: https://help.aliyun.com/api/r-kvstore/dataoperate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DataOperateWithChan(request *DataOperateRequest) (<-chan *DataOperateResponse, <-chan error) {
responseChan := make(chan *DataOperateResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.DataOperate(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// DataOperateWithCallback invokes the r_kvstore.DataOperate API asynchronously
// api document: https://help.aliyun.com/api/r-kvstore/dataoperate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DataOperateWithCallback(request *DataOperateRequest, callback func(response *DataOperateResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *DataOperateResponse
var err error
defer close(result)
response, err = client.DataOperate(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// DataOperateRequest is the request struct for api DataOperate
type DataOperateRequest struct {
*requests.RpcRequest
                    ResourceOwnerId     requests.Integer `position:"Query" name:"ResourceOwnerId"`
                    SecurityToken     string `position:"Query" name:"SecurityToken"`
                    ResourceOwnerAccount     string `position:"Query" name:"ResourceOwnerAccount"`
                    OwnerAccount     string `position:"Query" name:"OwnerAccount"`
                    OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
                    Command     string `position:"Query" name:"Command"`
                    InstanceId     string `position:"Query" name:"InstanceId"`
}


// DataOperateResponse is the response struct for api DataOperate
type DataOperateResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            CommandResult     string `json:"CommandResult" xml:"CommandResult"`
}

// CreateDataOperateRequest creates a request to invoke DataOperate API
func CreateDataOperateRequest() (request *DataOperateRequest) {
request = &DataOperateRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("R-kvstore", "2015-01-01", "DataOperate", "kvstore", "openAPI")
return
}

// CreateDataOperateResponse creates a response to parse from DataOperate response
func CreateDataOperateResponse() (response *DataOperateResponse) {
response = &DataOperateResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


