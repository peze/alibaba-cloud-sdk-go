package ace_ops

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// Apmquery invokes the ace_ops.Apmquery API synchronously
// api document: https://help.aliyun.com/api/ace-ops/apmquery.html
func (client *Client) Apmquery(request *ApmqueryRequest) (response *ApmqueryResponse, err error) {
	response = CreateApmqueryResponse()
	err = client.DoAction(request, response)
	return
}

// ApmqueryWithChan invokes the ace_ops.Apmquery API asynchronously
// api document: https://help.aliyun.com/api/ace-ops/apmquery.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ApmqueryWithChan(request *ApmqueryRequest) (<-chan *ApmqueryResponse, <-chan error) {
	responseChan := make(chan *ApmqueryResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.Apmquery(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ApmqueryWithCallback invokes the ace_ops.Apmquery API asynchronously
// api document: https://help.aliyun.com/api/ace-ops/apmquery.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ApmqueryWithCallback(request *ApmqueryRequest, callback func(response *ApmqueryResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ApmqueryResponse
		var err error
		defer close(result)
		response, err = client.Apmquery(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ApmqueryRequest is the request struct for api Apmquery
type ApmqueryRequest struct {
	*requests.RpcRequest
	Ip    string `position:"Query" name:"ip"`
	Name  string `position:"Query" name:"name"`
	Group string `position:"Query" name:"group"`
}

// ApmqueryResponse is the response struct for api Apmquery
type ApmqueryResponse struct {
	*responses.BaseResponse
	Url     string `json:"url" xml:"url"`
	Version string `json:"version" xml:"version"`
}

// CreateApmqueryRequest creates a request to invoke Apmquery API
func CreateApmqueryRequest() (request *ApmqueryRequest) {
	request = &ApmqueryRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ace-ops", "2015-09-06", "Apmquery", "", "")
	return
}

// CreateApmqueryResponse creates a response to parse from Apmquery response
func CreateApmqueryResponse() (response *ApmqueryResponse) {
	response = &ApmqueryResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
