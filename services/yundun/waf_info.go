
package yundun

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// WafInfo invokes the yundun.WafInfo API synchronously
// api document: https://help.aliyun.com/api/yundun/wafinfo.html
func (client *Client) WafInfo(request *WafInfoRequest) (response *WafInfoResponse, err error) {
response = CreateWafInfoResponse()
err = client.DoAction(request, response)
return
}

// WafInfoWithChan invokes the yundun.WafInfo API asynchronously
// api document: https://help.aliyun.com/api/yundun/wafinfo.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) WafInfoWithChan(request *WafInfoRequest) (<-chan *WafInfoResponse, <-chan error) {
responseChan := make(chan *WafInfoResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.WafInfo(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// WafInfoWithCallback invokes the yundun.WafInfo API asynchronously
// api document: https://help.aliyun.com/api/yundun/wafinfo.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) WafInfoWithCallback(request *WafInfoRequest, callback func(response *WafInfoResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *WafInfoResponse
var err error
defer close(result)
response, err = client.WafInfo(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// WafInfoRequest is the request struct for api WafInfo
type WafInfoRequest struct {
*requests.RpcRequest
                    InstanceId     string `position:"Query" name:"InstanceId"`
                    InstanceType     string `position:"Query" name:"InstanceType"`
}


// WafInfoResponse is the response struct for api WafInfo
type WafInfoResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            WafDomainNum     int `json:"WafDomainNum" xml:"WafDomainNum"`
                    WafInfos WafInfos `json:"WafInfos" xml:"WafInfos"`
}

// CreateWafInfoRequest creates a request to invoke WafInfo API
func CreateWafInfoRequest() (request *WafInfoRequest) {
request = &WafInfoRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Yundun", "2015-04-16", "WafInfo", "yundun", "openAPI")
return
}

// CreateWafInfoResponse creates a response to parse from WafInfo response
func CreateWafInfoResponse() (response *WafInfoResponse) {
response = &WafInfoResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


