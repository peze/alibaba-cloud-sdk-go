
package yundun

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ConfigDdos invokes the yundun.ConfigDdos API synchronously
// api document: https://help.aliyun.com/api/yundun/configddos.html
func (client *Client) ConfigDdos(request *ConfigDdosRequest) (response *ConfigDdosResponse, err error) {
response = CreateConfigDdosResponse()
err = client.DoAction(request, response)
return
}

// ConfigDdosWithChan invokes the yundun.ConfigDdos API asynchronously
// api document: https://help.aliyun.com/api/yundun/configddos.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ConfigDdosWithChan(request *ConfigDdosRequest) (<-chan *ConfigDdosResponse, <-chan error) {
responseChan := make(chan *ConfigDdosResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.ConfigDdos(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// ConfigDdosWithCallback invokes the yundun.ConfigDdos API asynchronously
// api document: https://help.aliyun.com/api/yundun/configddos.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ConfigDdosWithCallback(request *ConfigDdosRequest, callback func(response *ConfigDdosResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *ConfigDdosResponse
var err error
defer close(result)
response, err = client.ConfigDdos(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// ConfigDdosRequest is the request struct for api ConfigDdos
type ConfigDdosRequest struct {
*requests.RpcRequest
                    StrategyPosition     requests.Integer `position:"Query" name:"StrategyPosition"`
                    InstanceId     string `position:"Query" name:"InstanceId"`
                    Level     requests.Integer `position:"Query" name:"Level"`
                    InstanceType     string `position:"Query" name:"InstanceType"`
                    FlowPosition     requests.Integer `position:"Query" name:"FlowPosition"`
}


// ConfigDdosResponse is the response struct for api ConfigDdos
type ConfigDdosResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
}

// CreateConfigDdosRequest creates a request to invoke ConfigDdos API
func CreateConfigDdosRequest() (request *ConfigDdosRequest) {
request = &ConfigDdosRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Yundun", "2015-04-16", "ConfigDdos", "yundun", "openAPI")
return
}

// CreateConfigDdosResponse creates a response to parse from ConfigDdos response
func CreateConfigDdosResponse() (response *ConfigDdosResponse) {
response = &ConfigDdosResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


