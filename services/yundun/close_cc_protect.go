
package yundun

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CloseCCProtect invokes the yundun.CloseCCProtect API synchronously
// api document: https://help.aliyun.com/api/yundun/closeccprotect.html
func (client *Client) CloseCCProtect(request *CloseCCProtectRequest) (response *CloseCCProtectResponse, err error) {
response = CreateCloseCCProtectResponse()
err = client.DoAction(request, response)
return
}

// CloseCCProtectWithChan invokes the yundun.CloseCCProtect API asynchronously
// api document: https://help.aliyun.com/api/yundun/closeccprotect.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CloseCCProtectWithChan(request *CloseCCProtectRequest) (<-chan *CloseCCProtectResponse, <-chan error) {
responseChan := make(chan *CloseCCProtectResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.CloseCCProtect(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// CloseCCProtectWithCallback invokes the yundun.CloseCCProtect API asynchronously
// api document: https://help.aliyun.com/api/yundun/closeccprotect.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CloseCCProtectWithCallback(request *CloseCCProtectRequest, callback func(response *CloseCCProtectResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *CloseCCProtectResponse
var err error
defer close(result)
response, err = client.CloseCCProtect(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// CloseCCProtectRequest is the request struct for api CloseCCProtect
type CloseCCProtectRequest struct {
*requests.RpcRequest
                    InstanceId     string `position:"Query" name:"InstanceId"`
                    InstanceType     string `position:"Query" name:"InstanceType"`
}


// CloseCCProtectResponse is the response struct for api CloseCCProtect
type CloseCCProtectResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
}

// CreateCloseCCProtectRequest creates a request to invoke CloseCCProtect API
func CreateCloseCCProtectRequest() (request *CloseCCProtectRequest) {
request = &CloseCCProtectRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Yundun", "2015-04-16", "CloseCCProtect", "yundun", "openAPI")
return
}

// CreateCloseCCProtectResponse creates a response to parse from CloseCCProtect response
func CreateCloseCCProtectResponse() (response *CloseCCProtectResponse) {
response = &CloseCCProtectResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


