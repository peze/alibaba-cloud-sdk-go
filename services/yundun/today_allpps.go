
package yundun

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// TodayAllpps invokes the yundun.TodayAllpps API synchronously
// api document: https://help.aliyun.com/api/yundun/todayallpps.html
func (client *Client) TodayAllpps(request *TodayAllppsRequest) (response *TodayAllppsResponse, err error) {
response = CreateTodayAllppsResponse()
err = client.DoAction(request, response)
return
}

// TodayAllppsWithChan invokes the yundun.TodayAllpps API asynchronously
// api document: https://help.aliyun.com/api/yundun/todayallpps.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) TodayAllppsWithChan(request *TodayAllppsRequest) (<-chan *TodayAllppsResponse, <-chan error) {
responseChan := make(chan *TodayAllppsResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.TodayAllpps(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// TodayAllppsWithCallback invokes the yundun.TodayAllpps API asynchronously
// api document: https://help.aliyun.com/api/yundun/todayallpps.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) TodayAllppsWithCallback(request *TodayAllppsRequest, callback func(response *TodayAllppsResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *TodayAllppsResponse
var err error
defer close(result)
response, err = client.TodayAllpps(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// TodayAllppsRequest is the request struct for api TodayAllpps
type TodayAllppsRequest struct {
*requests.RpcRequest
}


// TodayAllppsResponse is the response struct for api TodayAllpps
type TodayAllppsResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            Pps     int64 `json:"Pps" xml:"Pps"`
}

// CreateTodayAllppsRequest creates a request to invoke TodayAllpps API
func CreateTodayAllppsRequest() (request *TodayAllppsRequest) {
request = &TodayAllppsRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Yundun", "2015-02-27", "TodayAllpps", "yundun", "openAPI")
return
}

// CreateTodayAllppsResponse creates a response to parse from TodayAllpps response
func CreateTodayAllppsResponse() (response *TodayAllppsResponse) {
response = &TodayAllppsResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


