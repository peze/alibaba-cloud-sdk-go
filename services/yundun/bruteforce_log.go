
package yundun

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// BruteforceLog invokes the yundun.BruteforceLog API synchronously
// api document: https://help.aliyun.com/api/yundun/bruteforcelog.html
func (client *Client) BruteforceLog(request *BruteforceLogRequest) (response *BruteforceLogResponse, err error) {
response = CreateBruteforceLogResponse()
err = client.DoAction(request, response)
return
}

// BruteforceLogWithChan invokes the yundun.BruteforceLog API asynchronously
// api document: https://help.aliyun.com/api/yundun/bruteforcelog.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) BruteforceLogWithChan(request *BruteforceLogRequest) (<-chan *BruteforceLogResponse, <-chan error) {
responseChan := make(chan *BruteforceLogResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.BruteforceLog(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// BruteforceLogWithCallback invokes the yundun.BruteforceLog API asynchronously
// api document: https://help.aliyun.com/api/yundun/bruteforcelog.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) BruteforceLogWithCallback(request *BruteforceLogRequest, callback func(response *BruteforceLogResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *BruteforceLogResponse
var err error
defer close(result)
response, err = client.BruteforceLog(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// BruteforceLogRequest is the request struct for api BruteforceLog
type BruteforceLogRequest struct {
*requests.RpcRequest
                    JstOwnerId     requests.Integer `position:"Query" name:"JstOwnerId"`
                    InstanceId     string `position:"Query" name:"InstanceId"`
                    RecordType     requests.Integer `position:"Query" name:"RecordType"`
                    PageSize     requests.Integer `position:"Query" name:"PageSize"`
                    PageNumber     requests.Integer `position:"Query" name:"PageNumber"`
}


// BruteforceLogResponse is the response struct for api BruteforceLog
type BruteforceLogResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            StartTime     string `json:"StartTime" xml:"StartTime"`
            EndTime     string `json:"EndTime" xml:"EndTime"`
            PageNumber     int `json:"PageNumber" xml:"PageNumber"`
            PageSize     int `json:"PageSize" xml:"PageSize"`
            TotalCount     int `json:"TotalCount" xml:"TotalCount"`
                    LogList LogListInBruteforceLog `json:"LogList" xml:"LogList"`
}

// CreateBruteforceLogRequest creates a request to invoke BruteforceLog API
func CreateBruteforceLogRequest() (request *BruteforceLogRequest) {
request = &BruteforceLogRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Yundun", "2015-04-16", "BruteforceLog", "yundun", "openAPI")
return
}

// CreateBruteforceLogResponse creates a response to parse from BruteforceLog response
func CreateBruteforceLogResponse() (response *BruteforceLogResponse) {
response = &BruteforceLogResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


