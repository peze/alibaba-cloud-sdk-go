package aas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateAccessKeyForAccount invokes the aas.CreateAccessKeyForAccount API synchronously
// api document: https://help.aliyun.com/api/aas/createaccesskeyforaccount.html
func (client *Client) CreateAccessKeyForAccount(request *CreateAccessKeyForAccountRequest) (response *CreateAccessKeyForAccountResponse, err error) {
	response = CreateCreateAccessKeyForAccountResponse()
	err = client.DoAction(request, response)
	return
}

// CreateAccessKeyForAccountWithChan invokes the aas.CreateAccessKeyForAccount API asynchronously
// api document: https://help.aliyun.com/api/aas/createaccesskeyforaccount.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateAccessKeyForAccountWithChan(request *CreateAccessKeyForAccountRequest) (<-chan *CreateAccessKeyForAccountResponse, <-chan error) {
	responseChan := make(chan *CreateAccessKeyForAccountResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateAccessKeyForAccount(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateAccessKeyForAccountWithCallback invokes the aas.CreateAccessKeyForAccount API asynchronously
// api document: https://help.aliyun.com/api/aas/createaccesskeyforaccount.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateAccessKeyForAccountWithCallback(request *CreateAccessKeyForAccountRequest, callback func(response *CreateAccessKeyForAccountResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateAccessKeyForAccountResponse
		var err error
		defer close(result)
		response, err = client.CreateAccessKeyForAccount(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateAccessKeyForAccountRequest is the request struct for api CreateAccessKeyForAccount
type CreateAccessKeyForAccountRequest struct {
	*requests.RpcRequest
	AKSecret string `position:"Query" name:"AKSecret"`
	PK       string `position:"Query" name:"PK"`
}

// CreateAccessKeyForAccountResponse is the response struct for api CreateAccessKeyForAccount
type CreateAccessKeyForAccountResponse struct {
	*responses.BaseResponse
	RequestId string    `json:"RequestId" xml:"RequestId"`
	PK        string    `json:"PK" xml:"PK"`
	AccessKey AccessKey `json:"AccessKey" xml:"AccessKey"`
}

// CreateCreateAccessKeyForAccountRequest creates a request to invoke CreateAccessKeyForAccount API
func CreateCreateAccessKeyForAccountRequest() (request *CreateAccessKeyForAccountRequest) {
	request = &CreateAccessKeyForAccountRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Aas", "2015-07-01", "CreateAccessKeyForAccount", "aas", "openAPI")
	return
}

// CreateCreateAccessKeyForAccountResponse creates a response to parse from CreateAccessKeyForAccount response
func CreateCreateAccessKeyForAccountResponse() (response *CreateAccessKeyForAccountResponse) {
	response = &CreateAccessKeyForAccountResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
