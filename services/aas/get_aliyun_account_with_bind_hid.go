package aas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetAliyunAccountWithBindHid invokes the aas.GetAliyunAccountWithBindHid API synchronously
// api document: https://help.aliyun.com/api/aas/getaliyunaccountwithbindhid.html
func (client *Client) GetAliyunAccountWithBindHid(request *GetAliyunAccountWithBindHidRequest) (response *GetAliyunAccountWithBindHidResponse, err error) {
	response = CreateGetAliyunAccountWithBindHidResponse()
	err = client.DoAction(request, response)
	return
}

// GetAliyunAccountWithBindHidWithChan invokes the aas.GetAliyunAccountWithBindHid API asynchronously
// api document: https://help.aliyun.com/api/aas/getaliyunaccountwithbindhid.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetAliyunAccountWithBindHidWithChan(request *GetAliyunAccountWithBindHidRequest) (<-chan *GetAliyunAccountWithBindHidResponse, <-chan error) {
	responseChan := make(chan *GetAliyunAccountWithBindHidResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetAliyunAccountWithBindHid(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetAliyunAccountWithBindHidWithCallback invokes the aas.GetAliyunAccountWithBindHid API asynchronously
// api document: https://help.aliyun.com/api/aas/getaliyunaccountwithbindhid.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetAliyunAccountWithBindHidWithCallback(request *GetAliyunAccountWithBindHidRequest, callback func(response *GetAliyunAccountWithBindHidResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetAliyunAccountWithBindHidResponse
		var err error
		defer close(result)
		response, err = client.GetAliyunAccountWithBindHid(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetAliyunAccountWithBindHidRequest is the request struct for api GetAliyunAccountWithBindHid
type GetAliyunAccountWithBindHidRequest struct {
	*requests.RpcRequest
	InnerAccountHid string `position:"Query" name:"InnerAccountHid"`
}

// GetAliyunAccountWithBindHidResponse is the response struct for api GetAliyunAccountWithBindHid
type GetAliyunAccountWithBindHidResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	PK        string `json:"PK" xml:"PK"`
}

// CreateGetAliyunAccountWithBindHidRequest creates a request to invoke GetAliyunAccountWithBindHid API
func CreateGetAliyunAccountWithBindHidRequest() (request *GetAliyunAccountWithBindHidRequest) {
	request = &GetAliyunAccountWithBindHidRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Aas", "2015-07-01", "GetAliyunAccountWithBindHid", "aas", "openAPI")
	return
}

// CreateGetAliyunAccountWithBindHidResponse creates a response to parse from GetAliyunAccountWithBindHid response
func CreateGetAliyunAccountWithBindHidResponse() (response *GetAliyunAccountWithBindHidResponse) {
	response = &GetAliyunAccountWithBindHidResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
