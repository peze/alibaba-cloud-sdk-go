
package oms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetProductDefine invokes the oms.GetProductDefine API synchronously
// api document: https://help.aliyun.com/api/oms/getproductdefine.html
func (client *Client) GetProductDefine(request *GetProductDefineRequest) (response *GetProductDefineResponse, err error) {
response = CreateGetProductDefineResponse()
err = client.DoAction(request, response)
return
}

// GetProductDefineWithChan invokes the oms.GetProductDefine API asynchronously
// api document: https://help.aliyun.com/api/oms/getproductdefine.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetProductDefineWithChan(request *GetProductDefineRequest) (<-chan *GetProductDefineResponse, <-chan error) {
responseChan := make(chan *GetProductDefineResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.GetProductDefine(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// GetProductDefineWithCallback invokes the oms.GetProductDefine API asynchronously
// api document: https://help.aliyun.com/api/oms/getproductdefine.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetProductDefineWithCallback(request *GetProductDefineRequest, callback func(response *GetProductDefineResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *GetProductDefineResponse
var err error
defer close(result)
response, err = client.GetProductDefine(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// GetProductDefineRequest is the request struct for api GetProductDefine
type GetProductDefineRequest struct {
*requests.RpcRequest
                    DataType     string `position:"Query" name:"DataType"`
                    ProductName     string `position:"Query" name:"ProductName"`
                    SiteBid     string `position:"Query" name:"siteBid"`
}


// GetProductDefineResponse is the response struct for api GetProductDefine
type GetProductDefineResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            ProductName     string `json:"ProductName" xml:"ProductName"`
            DataType     string `json:"DataType" xml:"DataType"`
            SiteBid     string `json:"siteBid" xml:"siteBid"`
                    ProductList ProductListInGetProductDefine `json:"ProductList" xml:"ProductList"`
}

// CreateGetProductDefineRequest creates a request to invoke GetProductDefine API
func CreateGetProductDefineRequest() (request *GetProductDefineRequest) {
request = &GetProductDefineRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Oms", "2015-02-12", "GetProductDefine", "oms", "openAPI")
return
}

// CreateGetProductDefineResponse creates a response to parse from GetProductDefine response
func CreateGetProductDefineResponse() (response *GetProductDefineResponse) {
response = &GetProductDefineResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


