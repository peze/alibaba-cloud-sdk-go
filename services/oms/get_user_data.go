
package oms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetUserData invokes the oms.GetUserData API synchronously
// api document: https://help.aliyun.com/api/oms/getuserdata.html
func (client *Client) GetUserData(request *GetUserDataRequest) (response *GetUserDataResponse, err error) {
response = CreateGetUserDataResponse()
err = client.DoAction(request, response)
return
}

// GetUserDataWithChan invokes the oms.GetUserData API asynchronously
// api document: https://help.aliyun.com/api/oms/getuserdata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetUserDataWithChan(request *GetUserDataRequest) (<-chan *GetUserDataResponse, <-chan error) {
responseChan := make(chan *GetUserDataResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.GetUserData(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// GetUserDataWithCallback invokes the oms.GetUserData API asynchronously
// api document: https://help.aliyun.com/api/oms/getuserdata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetUserDataWithCallback(request *GetUserDataRequest, callback func(response *GetUserDataResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *GetUserDataResponse
var err error
defer close(result)
response, err = client.GetUserData(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// GetUserDataRequest is the request struct for api GetUserData
type GetUserDataRequest struct {
*requests.RpcRequest
                    OwnerAccount     string `position:"Query" name:"OwnerAccount"`
                    EndTime     string `position:"Query" name:"EndTime"`
                    StartTime     string `position:"Query" name:"StartTime"`
                    OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
                    MaxResult     requests.Integer `position:"Query" name:"MaxResult"`
                    DataType     string `position:"Query" name:"DataType"`
                    NextToken     string `position:"Query" name:"NextToken"`
                    ProductName     string `position:"Query" name:"ProductName"`
                    TableName     string `position:"Query" name:"TableName"`
}


// GetUserDataResponse is the response struct for api GetUserData
type GetUserDataResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            ProductName     string `json:"ProductName" xml:"ProductName"`
            TableName     string `json:"TableName" xml:"TableName"`
            DataType     string `json:"DataType" xml:"DataType"`
            NextToken     string `json:"NextToken" xml:"NextToken"`
                    DataList DataList `json:"DataList" xml:"DataList"`
}

// CreateGetUserDataRequest creates a request to invoke GetUserData API
func CreateGetUserDataRequest() (request *GetUserDataRequest) {
request = &GetUserDataRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Oms", "2015-02-12", "GetUserData", "oms", "openAPI")
return
}

// CreateGetUserDataResponse creates a response to parse from GetUserData response
func CreateGetUserDataResponse() (response *GetUserDataResponse) {
response = &GetUserDataResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


