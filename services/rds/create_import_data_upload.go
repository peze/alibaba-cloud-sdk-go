
package rds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateImportDataUpload invokes the rds.CreateImportDataUpload API synchronously
// api document: https://help.aliyun.com/api/rds/createimportdataupload.html
func (client *Client) CreateImportDataUpload(request *CreateImportDataUploadRequest) (response *CreateImportDataUploadResponse, err error) {
response = CreateCreateImportDataUploadResponse()
err = client.DoAction(request, response)
return
}

// CreateImportDataUploadWithChan invokes the rds.CreateImportDataUpload API asynchronously
// api document: https://help.aliyun.com/api/rds/createimportdataupload.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateImportDataUploadWithChan(request *CreateImportDataUploadRequest) (<-chan *CreateImportDataUploadResponse, <-chan error) {
responseChan := make(chan *CreateImportDataUploadResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.CreateImportDataUpload(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// CreateImportDataUploadWithCallback invokes the rds.CreateImportDataUpload API asynchronously
// api document: https://help.aliyun.com/api/rds/createimportdataupload.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateImportDataUploadWithCallback(request *CreateImportDataUploadRequest, callback func(response *CreateImportDataUploadResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *CreateImportDataUploadResponse
var err error
defer close(result)
response, err = client.CreateImportDataUpload(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// CreateImportDataUploadRequest is the request struct for api CreateImportDataUpload
type CreateImportDataUploadRequest struct {
*requests.RpcRequest
                    ResourceOwnerId     requests.Integer `position:"Query" name:"ResourceOwnerId"`
                    ResourceOwnerAccount     string `position:"Query" name:"ResourceOwnerAccount"`
                    OwnerAccount     string `position:"Query" name:"OwnerAccount"`
                    OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
                    DBName     string `position:"Query" name:"DBName"`
                    DBInstanceId     string `position:"Query" name:"DBInstanceId"`
}


// CreateImportDataUploadResponse is the response struct for api CreateImportDataUpload
type CreateImportDataUploadResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            FtpServer     string `json:"FtpServer" xml:"FtpServer"`
            Port     int `json:"Port" xml:"Port"`
            UserName     string `json:"UserName" xml:"UserName"`
            Password     string `json:"Password" xml:"Password"`
            FileName     string `json:"FileName" xml:"FileName"`
}

// CreateCreateImportDataUploadRequest creates a request to invoke CreateImportDataUpload API
func CreateCreateImportDataUploadRequest() (request *CreateImportDataUploadRequest) {
request = &CreateImportDataUploadRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Rds", "2013-05-28", "CreateImportDataUpload", "rds", "openAPI")
return
}

// CreateCreateImportDataUploadResponse creates a response to parse from CreateImportDataUpload response
func CreateCreateImportDataUploadResponse() (response *CreateImportDataUploadResponse) {
response = &CreateImportDataUploadResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


