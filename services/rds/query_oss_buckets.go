
package rds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryOssBuckets invokes the rds.QueryOssBuckets API synchronously
// api document: https://help.aliyun.com/api/rds/queryossbuckets.html
func (client *Client) QueryOssBuckets(request *QueryOssBucketsRequest) (response *QueryOssBucketsResponse, err error) {
response = CreateQueryOssBucketsResponse()
err = client.DoAction(request, response)
return
}

// QueryOssBucketsWithChan invokes the rds.QueryOssBuckets API asynchronously
// api document: https://help.aliyun.com/api/rds/queryossbuckets.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryOssBucketsWithChan(request *QueryOssBucketsRequest) (<-chan *QueryOssBucketsResponse, <-chan error) {
responseChan := make(chan *QueryOssBucketsResponse, 1)
errChan := make(chan error, 1)
err := client.AddAsyncTask(func() {
defer close(responseChan)
defer close(errChan)
response, err :=  client.QueryOssBuckets(request)
if err != nil {
errChan <- err
} else {
responseChan <- response
}
})
if err != nil {
errChan <- err
close(responseChan)
close(errChan)
}
return responseChan, errChan
}

// QueryOssBucketsWithCallback invokes the rds.QueryOssBuckets API asynchronously
// api document: https://help.aliyun.com/api/rds/queryossbuckets.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryOssBucketsWithCallback(request *QueryOssBucketsRequest, callback func(response *QueryOssBucketsResponse, err error)) (<-chan int) {
result := make(chan int, 1)
err := client.AddAsyncTask(func() {
var response *QueryOssBucketsResponse
var err error
defer close(result)
response, err = client.QueryOssBuckets(request)
callback(response, err)
result <- 1
})
if err != nil {
defer close(result)
callback(nil, err)
result <- 0
}
return result
}

// QueryOssBucketsRequest is the request struct for api QueryOssBuckets
type QueryOssBucketsRequest struct {
*requests.RpcRequest
                    ResourceOwnerId     requests.Integer `position:"Query" name:"ResourceOwnerId"`
                    SecurityToken     string `position:"Query" name:"SecurityToken"`
                    DBInstanceId     string `position:"Query" name:"DBInstanceId"`
                    ResourceOwnerAccount     string `position:"Query" name:"ResourceOwnerAccount"`
                    OwnerAccount     string `position:"Query" name:"OwnerAccount"`
                    OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
}


// QueryOssBucketsResponse is the response struct for api QueryOssBuckets
type QueryOssBucketsResponse struct {
*responses.BaseResponse
            RequestId     string `json:"RequestId" xml:"RequestId"`
            DBInstanceId     string `json:"DBInstanceId" xml:"DBInstanceId"`
                    Bucket Bucket `json:"Bucket" xml:"Bucket"`
}

// CreateQueryOssBucketsRequest creates a request to invoke QueryOssBuckets API
func CreateQueryOssBucketsRequest() (request *QueryOssBucketsRequest) {
request = &QueryOssBucketsRequest{
RpcRequest: &requests.RpcRequest{},
}
request.InitWithApiInfo("Rds", "2014-08-15", "QueryOssBuckets", "rds", "openAPI")
return
}

// CreateQueryOssBucketsResponse creates a response to parse from QueryOssBuckets response
func CreateQueryOssBucketsResponse() (response *QueryOssBucketsResponse) {
response = &QueryOssBucketsResponse{
BaseResponse: &responses.BaseResponse{},
}
return
}


