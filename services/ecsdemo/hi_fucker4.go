package ecsdemo

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// HiFucker4 invokes the ecsdemo.HiFucker4 API synchronously
// api document: https://help.aliyun.com/api/ecsdemo/hifucker4.html
func (client *Client) HiFucker4(request *HiFucker4Request) (response *HiFucker4Response, err error) {
	response = CreateHiFucker4Response()
	err = client.DoAction(request, response)
	return
}

// HiFucker4WithChan invokes the ecsdemo.HiFucker4 API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/hifucker4.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) HiFucker4WithChan(request *HiFucker4Request) (<-chan *HiFucker4Response, <-chan error) {
	responseChan := make(chan *HiFucker4Response, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.HiFucker4(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// HiFucker4WithCallback invokes the ecsdemo.HiFucker4 API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/hifucker4.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) HiFucker4WithCallback(request *HiFucker4Request, callback func(response *HiFucker4Response, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *HiFucker4Response
		var err error
		defer close(result)
		response, err = client.HiFucker4(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// HiFucker4Request is the request struct for api HiFucker4
type HiFucker4Request struct {
	*requests.RpcRequest
	ResourceTypeCodes *[]string        `position:"Query" name:"ResourceTypeCodes"  type:"Repeated"`
	Product           string           `position:"Query" name:"Product"`
	FromCache         requests.Boolean `position:"Query" name:"FromCache"`
	AcceptLanguage    string           `position:"Query" name:"AcceptLanguage"`
	PageSize          requests.Integer `position:"Query" name:"PageSize"`
	Filters           *[]string        `position:"Query" name:"Filters"  type:"Repeated"`
	Env               string           `position:"Query" name:"Env"`
	SiteType          string           `position:"Query" name:"SiteType"`
	PageNumber        requests.Integer `position:"Query" name:"PageNumber"`
}

// HiFucker4Response is the response struct for api HiFucker4
type HiFucker4Response struct {
	*responses.BaseResponse
	RequestId     string         `json:"RequestId" xml:"RequestId"`
	PageNumber    int            `json:"PageNumber" xml:"PageNumber"`
	PageSize      int            `json:"PageSize" xml:"PageSize"`
	TotalCount    int            `json:"TotalCount" xml:"TotalCount"`
	ResourceTypes []ResourceType `json:"ResourceTypes" xml:"ResourceTypes"`
}

// CreateHiFucker4Request creates a request to invoke HiFucker4 API
func CreateHiFucker4Request() (request *HiFucker4Request) {
	request = &HiFucker4Request{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("EcsDemo", "2019-06-20", "HiFucker4", "", "")
	return
}

// CreateHiFucker4Response creates a response to parse from HiFucker4 response
func CreateHiFucker4Response() (response *HiFucker4Response) {
	response = &HiFucker4Response{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
