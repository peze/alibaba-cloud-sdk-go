package ecsdemo

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// Fs invokes the ecsdemo.Fs API synchronously
// api document: https://help.aliyun.com/api/ecsdemo/fs.html
func (client *Client) Fs(request *FsRequest) (response *FsResponse, err error) {
	response = CreateFsResponse()
	err = client.DoAction(request, response)
	return
}

// FsWithChan invokes the ecsdemo.Fs API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/fs.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) FsWithChan(request *FsRequest) (<-chan *FsResponse, <-chan error) {
	responseChan := make(chan *FsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.Fs(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// FsWithCallback invokes the ecsdemo.Fs API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/fs.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) FsWithCallback(request *FsRequest, callback func(response *FsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *FsResponse
		var err error
		defer close(result)
		response, err = client.Fs(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// FsRequest is the request struct for api Fs
type FsRequest struct {
	*requests.RpcRequest
	ImageId            string `position:"Body" name:"ImageId"`
	ClientToken        string `position:"Body" name:"ClientToken"`
	InternetChargeType string `position:"Body" name:"InternetChargeType"`
}

// FsResponse is the response struct for api Fs
type FsResponse struct {
	*responses.BaseResponse
	InstanceId string `json:"InstanceId" xml:"InstanceId"`
	RequestId  string `json:"RequestId" xml:"RequestId"`
}

// CreateFsRequest creates a request to invoke Fs API
func CreateFsRequest() (request *FsRequest) {
	request = &FsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("EcsDemo", "2019-06-20", "Fs", "", "")
	return
}

// CreateFsResponse creates a response to parse from Fs response
func CreateFsResponse() (response *FsResponse) {
	response = &FsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
