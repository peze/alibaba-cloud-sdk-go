package ecsdemo

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateTestEcs invokes the ecsdemo.CreateTestEcs API synchronously
// api document: https://help.aliyun.com/api/ecsdemo/createtestecs.html
func (client *Client) CreateTestEcs(request *CreateTestEcsRequest) (response *CreateTestEcsResponse, err error) {
	response = CreateCreateTestEcsResponse()
	err = client.DoAction(request, response)
	return
}

// CreateTestEcsWithChan invokes the ecsdemo.CreateTestEcs API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/createtestecs.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateTestEcsWithChan(request *CreateTestEcsRequest) (<-chan *CreateTestEcsResponse, <-chan error) {
	responseChan := make(chan *CreateTestEcsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateTestEcs(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateTestEcsWithCallback invokes the ecsdemo.CreateTestEcs API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/createtestecs.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateTestEcsWithCallback(request *CreateTestEcsRequest, callback func(response *CreateTestEcsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateTestEcsResponse
		var err error
		defer close(result)
		response, err = client.CreateTestEcs(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateTestEcsRequest is the request struct for api CreateTestEcs
type CreateTestEcsRequest struct {
	*requests.RpcRequest
	DailyTime         string           `position:"Query" name:"DailyTime"`
	NamespaceName     string           `position:"Query" name:"NamespaceName"`
	AuthKey           string           `position:"Query" name:"AuthKey"`
	ExtraParams       string           `position:"Body" name:"ExtraParams"`
	ChangeFreeStatus  string           `position:"Query" name:"ChangeFreeStatus"`
	ServerClientIp    string           `position:"Query" name:"ServerClientIp"`
	OnlineTime        string           `position:"Query" name:"OnlineTime"`
	CloseTime         string           `position:"Query" name:"CloseTime"`
	GmtModified       string           `position:"Query" name:"GmtModified"`
	RelationPeople    string           `position:"Query" name:"RelationPeople"`
	NamespaceId       requests.Integer `position:"Query" name:"NamespaceId"`
	ClientIp          string           `position:"Query" name:"ClientIp"`
	Id                requests.Integer `position:"Query" name:"Id"`
	ProjectStatusStr  string           `position:"Query" name:"ProjectStatusStr"`
	CreatePeopleName  string           `position:"Query" name:"CreatePeopleName"`
	MarketStr         string           `position:"Query" name:"MarketStr"`
	CreatePeopleBucId string           `position:"Query" name:"CreatePeopleBucId"`
	ProjectName       string           `position:"Query" name:"ProjectName"`
	PlanEndTime       string           `position:"Query" name:"PlanEndTime"`
	CreatePeopleId    string           `position:"Query" name:"CreatePeopleId"`
	ProjectDesc       string           `position:"Query" name:"ProjectDesc"`
	ChangeFreeOrderId string           `position:"Query" name:"ChangeFreeOrderId"`
	GmtCreate         string           `position:"Query" name:"GmtCreate"`
	Market            requests.Integer `position:"Query" name:"Market"`
	RequestId         string           `position:"Query" name:"RequestId"`
	PreTime           string           `position:"Query" name:"PreTime"`
	IdentityDTO       string           `position:"Body" name:"IdentityDTO"`
	PlanStartTime     string           `position:"Query" name:"PlanStartTime"`
	ProjectStatus     requests.Integer `position:"Query" name:"ProjectStatus"`
	Properties        string           `position:"Query" name:"Properties"`
}

// CreateTestEcsResponse is the response struct for api CreateTestEcs
type CreateTestEcsResponse struct {
	*responses.BaseResponse
	TraceId            string `json:"TraceId" xml:"TraceId"`
	ErrorDetailMessage string `json:"ErrorDetailMessage" xml:"ErrorDetailMessage"`
	Success            bool   `json:"Success" xml:"Success"`
	ErrorMessage       string `json:"ErrorMessage" xml:"ErrorMessage"`
	ErrorCode          string `json:"ErrorCode" xml:"ErrorCode"`
}

// CreateCreateTestEcsRequest creates a request to invoke CreateTestEcs API
func CreateCreateTestEcsRequest() (request *CreateTestEcsRequest) {
	request = &CreateTestEcsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("EcsDemo", "2019-06-20", "CreateTestEcs", "", "")
	return
}

// CreateCreateTestEcsResponse creates a response to parse from CreateTestEcs response
func CreateCreateTestEcsResponse() (response *CreateTestEcsResponse) {
	response = &CreateTestEcsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
