package ecsdemo

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListDisks00 invokes the ecsdemo.ListDisks00 API synchronously
// api document: https://help.aliyun.com/api/ecsdemo/listdisks00.html
func (client *Client) ListDisks00(request *ListDisks00Request) (response *ListDisks00Response, err error) {
	response = CreateListDisks00Response()
	err = client.DoAction(request, response)
	return
}

// ListDisks00WithChan invokes the ecsdemo.ListDisks00 API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/listdisks00.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListDisks00WithChan(request *ListDisks00Request) (<-chan *ListDisks00Response, <-chan error) {
	responseChan := make(chan *ListDisks00Response, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListDisks00(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListDisks00WithCallback invokes the ecsdemo.ListDisks00 API asynchronously
// api document: https://help.aliyun.com/api/ecsdemo/listdisks00.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListDisks00WithCallback(request *ListDisks00Request, callback func(response *ListDisks00Response, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListDisks00Response
		var err error
		defer close(result)
		response, err = client.ListDisks00(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListDisks00Request is the request struct for api ListDisks00
type ListDisks00Request struct {
	*requests.RpcRequest
	AuthKey        string           `position:"Query" name:"AuthKey"`
	ExtraParams    string           `position:"Body" name:"ExtraParams"`
	ServerClientIp string           `position:"Query" name:"ServerClientIp"`
	RequestId      string           `position:"Query" name:"RequestId"`
	ClientIp       string           `position:"Query" name:"ClientIp"`
	IdentityDTO    string           `position:"Body" name:"IdentityDTO"`
	Id             requests.Integer `position:"Query" name:"Id"`
}

// ListDisks00Response is the response struct for api ListDisks00
type ListDisks00Response struct {
	*responses.BaseResponse
	TraceId            string `json:"TraceId" xml:"TraceId"`
	ErrorDetailMessage string `json:"ErrorDetailMessage" xml:"ErrorDetailMessage"`
	Success            bool   `json:"Success" xml:"Success"`
	ErrorMessage       string `json:"ErrorMessage" xml:"ErrorMessage"`
	ErrorCode          string `json:"ErrorCode" xml:"ErrorCode"`
}

// CreateListDisks00Request creates a request to invoke ListDisks00 API
func CreateListDisks00Request() (request *ListDisks00Request) {
	request = &ListDisks00Request{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("EcsDemo", "2019-06-20", "ListDisks00", "", "")
	return
}

// CreateListDisks00Response creates a response to parse from ListDisks00 response
func CreateListDisks00Response() (response *ListDisks00Response) {
	response = &ListDisks00Response{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
