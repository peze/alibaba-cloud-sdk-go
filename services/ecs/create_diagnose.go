package ecs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateDiagnose invokes the ecs.CreateDiagnose API synchronously
// api document: https://help.aliyun.com/api/ecs/creatediagnose.html
func (client *Client) CreateDiagnose(request *CreateDiagnoseRequest) (response *CreateDiagnoseResponse, err error) {
	response = CreateCreateDiagnoseResponse()
	err = client.DoAction(request, response)
	return
}

// CreateDiagnoseWithChan invokes the ecs.CreateDiagnose API asynchronously
// api document: https://help.aliyun.com/api/ecs/creatediagnose.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateDiagnoseWithChan(request *CreateDiagnoseRequest) (<-chan *CreateDiagnoseResponse, <-chan error) {
	responseChan := make(chan *CreateDiagnoseResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateDiagnose(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateDiagnoseWithCallback invokes the ecs.CreateDiagnose API asynchronously
// api document: https://help.aliyun.com/api/ecs/creatediagnose.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateDiagnoseWithCallback(request *CreateDiagnoseRequest, callback func(response *CreateDiagnoseResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateDiagnoseResponse
		var err error
		defer close(result)
		response, err = client.CreateDiagnose(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateDiagnoseRequest is the request struct for api CreateDiagnose
type CreateDiagnoseRequest struct {
	*requests.RpcRequest
	ResourceOwnerId       requests.Integer     `position:"Query" name:"ResourceOwnerId"`
	DiagnoseRequestParams string               `position:"Query" name:"DiagnoseRequestParams"`
	DiagnoseResponse      string               `position:"Query" name:"DiagnoseResponse"`
	DiagnoseRequestId     string               `position:"Query" name:"DiagnoseRequestId"`
	Tag                   *[]CreateDiagnoseTag `position:"Query" name:"Tag"  type:"Repeated"`
	ResourceOwnerAccount  string               `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount          string               `position:"Query" name:"OwnerAccount"`
	OwnerId               requests.Integer     `position:"Query" name:"OwnerId"`
	DiagnoseAction        string               `position:"Query" name:"DiagnoseAction"`
	DiagnoseErrorCode     string               `position:"Query" name:"DiagnoseErrorCode"`
	DiagnoseProduct       string               `position:"Query" name:"DiagnoseProduct"`
}

// CreateDiagnoseTag is a repeated param struct in CreateDiagnoseRequest
type CreateDiagnoseTag struct {
	Key   string `name:"Key"`
	Value string `name:"Value"`
}

// CreateDiagnoseResponse is the response struct for api CreateDiagnose
type CreateDiagnoseResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	DiagnoseId string `json:"DiagnoseId" xml:"DiagnoseId"`
}

// CreateCreateDiagnoseRequest creates a request to invoke CreateDiagnose API
func CreateCreateDiagnoseRequest() (request *CreateDiagnoseRequest) {
	request = &CreateDiagnoseRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ecs", "2016-03-14", "CreateDiagnose", "", "")
	return
}

// CreateCreateDiagnoseResponse creates a response to parse from CreateDiagnose response
func CreateCreateDiagnoseResponse() (response *CreateDiagnoseResponse) {
	response = &CreateDiagnoseResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
